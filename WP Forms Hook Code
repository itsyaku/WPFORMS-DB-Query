// Hook to process after WPForms submission
add_filter('wpforms_entry_email_atts', function($email, $fields, $entry, $form_data, $notification_id) {
    // Check if the form is the Customer Form (ID 437)
    if ($form_data['id'] == 437) {
        $log_file = WP_CONTENT_DIR . '/debug.log'; // Using the debug.log file for logging

        function log_message($message, $log_file) {
            $time = date('Y-m-d H:i:s');
            $log_entry = "[{$time}] - {$message}\n";
            error_log($log_entry); // Log to debug.log
        }

        $submitted_manufacturer = isset($fields[25]['value']) ? $fields[25]['value'] : null;
        $submitted_location = isset($fields[27]['value']) ? $fields[27]['value'] : null;
        log_message("Submitted Manufacturer: " . $submitted_manufacturer, $log_file);
        log_message("Submitted Location: " . $submitted_location, $log_file);

        try {
            if (empty($submitted_manufacturer) || empty($submitted_location)) {
                throw new Exception('Manufacturer or Location fields are missing or empty.');
            }

            // Query Dealerships Form (ID 235)
            $dealership_entries = wpforms()->get('entry')->get_entries(['form_id' => 235]);
            log_message("Found " . count($dealership_entries) . " dealership entries.", $log_file);

            if (empty($dealership_entries)) {
                throw new Exception('No entries found in the Dealerships Form.');
            }

            $dealership_emails = [];
            $customer_data = "Customer Data:\n\n";

            foreach ($dealership_entries as $dealership_entry) {
                // Decode the fields from JSON string to an associative array
                $fields_array = json_decode($dealership_entry->fields, true);
                log_message("Dealership Entry Fields: " . print_r($fields_array, true), $log_file);

                if (is_array($fields_array)) {
                    $dealer_manufacturer_value = isset($fields_array[7]) ? trim($fields_array[7]['value_raw']) : '';
                    $dealer_location_value = isset($fields_array[4]) ? trim($fields_array[4]['value_raw']) : '';
                    $dealer_lead_email_value = isset($fields_array[34]) ? trim($fields_array[34]['value']) : ''; // Email Address to receive leads

                    log_message("Dealer Manufacturer: $dealer_manufacturer_value, Dealer Location: $dealer_location_value", $log_file);
                    log_message("Comparing with Submitted - Manufacturer: $submitted_manufacturer, Location: $submitted_location", $log_file);

                    if (strcasecmp($dealer_manufacturer_value, $submitted_manufacturer) === 0 &&
                        strcasecmp($dealer_location_value, $submitted_location) === 0) {
                        if (!empty($dealer_lead_email_value)) {
                            $dealership_emails[] = $dealer_lead_email_value; // Only add if criteria match
                        }
                    }
                } else {
                    log_message("Dealership entry fields are not an array. Actual value: " . print_r($fields_array, true), $log_file);
                }
            }

            if (empty($dealership_emails)) {
                throw new Exception('No matching dealerships found.');
            }

            $email['to'] = implode(',', $dealership_emails);
            log_message("Notification will be sent to: " . implode(', ', $dealership_emails), $log_file);

            // Prepare customer data for email with improved formatting
            $customer_data .= "Manufacturer: **$submitted_manufacturer**\n";
            $customer_data .= "Location: **$submitted_location**\n";
            $customer_data .= "Additional Details:\n";

            foreach ($fields as $field_id => $field_value) {
                $customer_data .= "  - **Field ID $field_id**: " . (is_array($field_value) ? implode(', ', $field_value) : $field_value['value']) . "\n";
            }

            // Set email message to include formatted customer data
            $email['message'] .= "\n" . $customer_data;

            // Log email sending
            if (wp_mail($email['to'], $email['subject'], $email['message'], $email['headers'])) {
                log_message("Email sent successfully to: " . $email['to'], $log_file);
            } else {
                log_message("Failed to send email to: " . $email['to'], $log_file);
            }

        } catch (Exception $e) {
            log_message("Error in sending notifications: " . $e->getMessage(), $log_file);
        }
    }

    return $email;
}, 10, 5);
